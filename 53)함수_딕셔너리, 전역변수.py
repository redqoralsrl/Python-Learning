def dict_kwards(**kwards): #딕셔너리로 선언된다. **꼭 두개 선언해야된다.
    return kwards
Dic = dict_kwards(rank1="JAVA",rank2="C",rank3="C++")
print(Dic)

###########################

def func(*args,**kwargs): #튜플과 딕셔너리 선언하기
    print(args)
    print(kwargs)
func(1,2,3,4,5,name="백민기",age=25)

############전역변수###############

a = 1 # 전역변수
def test(a): # a test 지역변수
    a = a + 1
    print("함수 내 : ",a)
print("호출 전 : ",a)
test(a)
print("호출 후 : ",a)
#정리하자면 함수 안의 a와 밖의 a는 엄연히
#다르다는 것을 알 수 있다.

###########################

#만약 전역변수를 지역변수안에 끌고 오고 싶으면
#global을 사용한다.

a = 1
#객체지향에 대한 특징 -> 특정 지역에서만 접근이 가능한 변수들로만 사용이 목적
#지역에 제한을 둬서 특정 지역에만 사용하도록 제약 걸어야 되서 다른 곳에 써버리면 찾기 어렵고
#값이 갑자기 변할 수 있고 수정을 언제 했는지도 찾기 힘들다. 그래서 글로벌은 쓰는 걸 비추천한다.
#왠만하면 잘 안 쓴다.
def test1():
    global a # 전역변수를 가져다가 쓸꺼야 라는 선언
    a = a + 1
    print("함수 내 : ",a)
print("호출 전 : ",a)
test1()
print("호출 후 : ",a)


#lambda 함수는 일시적으로 만드는 것이다. 그때 잠깐 쓰고 넘어간다. 일회용성 함수라고도 한다.
#가독성은 높으나 메모리 부분엔 포기가 많다. 별로 좋지가 않다.
#어플리케이션, 응용프로그램, 웹 만들때 서버에 잠깐 일시적인 처리를 할때 사용한다.
#잠깐 응답하는 용도
#다른 함수에서 사용하려고 전달하려는 용도로도 쓰인다. 리스트 안 처럼 def 를 사용할 수 없는 곳에서
#사용가능하다.
sum = lambda a,b: a+b #sum이 일회용성 함수가 된다. 매개변수 a,b를 받을 수 있으며 a+b해주겠다.
print(sum(10,20))
